---
import { tv } from "tailwind-variants";

const colorModeStyles = tv({
  slots: {
    container: "relative group",
    trigger:
      "grid place-items-center p-2 border-0 rounded-lg bg-transparent text-slate-900 dark:text-slate-100 cursor-pointer transition-all duration-200 ease-in-out w-10 h-10 hover:bg-slate-900/8 hover:dark:bg-slate-100/8",
    icon: "grid place-items-center",
    dropdown:
      "absolute top-full right-0 mt-1 w-40 bg-slate-100/95 dark:bg-slate-800/95 backdrop-blur-lg border-0 rounded-lg shadow-[0_4px_12px_rgba(0,0,0,0.15)] dark:shadow-[0_4px_12px_rgba(255,255,255,0.1)] opacity-0 invisible -translate-y-2 transition-all duration-200 ease-in-out z-10 overflow-hidden group-hover:opacity-100 group-hover:visible group-hover:translate-y-0 hover:opacity-100 hover:visible hover:translate-y-0",
    item: "w-full grid grid-cols-[auto_1fr] items-center gap-3 px-3 py-3 border-0 bg-transparent text-slate-900 dark:text-slate-100 text-sm cursor-pointer transition-all duration-200 ease-in-out text-left whitespace-nowrap hover:bg-slate-900/12 hover:dark:bg-slate-100/12",
    itemIcon: "grid items-center",
  },
  variants: {
    active: {
      true: {
        item: "bg-slate-900/20 dark:bg-slate-100/20 font-medium",
      },
    },
  },
});

const styles = colorModeStyles();
---

<div class={styles.container()} id="color-mode-selector">
  <button
    class={styles.trigger()}
    type="button"
    aria-haspopup="true"
    aria-expanded="false"
    aria-label="カラーモード選択"
  >
    <span class={styles.icon()} data-mode="system">
      <!-- システムアイコン（デフォルト） -->
      <svg
        width="18"
        height="18"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
        <line x1="8" y1="21" x2="16" y2="21"></line>
        <line x1="12" y1="17" x2="12" y2="21"></line>
      </svg>
    </span>
  </button>

  <div class={styles.dropdown()} role="menu">
    <button class={styles.item()} type="button" data-mode="light" role="menuitem">
      <svg
        class={styles.itemIcon()}
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </svg>
      ライト
    </button>

    <button class={styles.item()} type="button" data-mode="dark" role="menuitem">
      <svg
        class={styles.itemIcon()}
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
      </svg>
      ダーク
    </button>

    <button class={styles.item({ active: true })} type="button" data-mode="system" role="menuitem">
      <svg
        class={styles.itemIcon()}
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
        <line x1="8" y1="21" x2="16" y2="21"></line>
        <line x1="12" y1="17" x2="12" y2="21"></line>
      </svg>
      システム
    </button>
  </div>
</div>

<script>
  const html = document.documentElement;

  type ColorMode = "light" | "dark" | "system";

  // アイコンの定義
  const icons: Record<ColorMode, string> = {
    light: `<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>`,
    dark: `<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>`,
    system: `<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
      <line x1="8" y1="21" x2="16" y2="21"></line>
      <line x1="12" y1="17" x2="12" y2="21"></line>
    </svg>`,
  };

  // 初期設定
  const savedMode = (localStorage.getItem("color-mode") as ColorMode) || "system";

  // カラーモードを適用
  function applyColorMode(mode: ColorMode) {
    if (mode === "system") {
      html.removeAttribute("data-color-mode");
      // システム設定に従う
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        html.classList.add("dark");
      } else {
        html.classList.remove("dark");
      }
    } else {
      html.setAttribute("data-color-mode", mode);
      if (mode === "dark") {
        html.classList.add("dark");
      } else {
        html.classList.remove("dark");
      }
    }
  }

  // UIを更新
  function updateUI(mode: ColorMode) {
    const selector = document.querySelector("#color-mode-selector");
    const items = selector?.querySelectorAll("button[data-mode]") as NodeListOf<HTMLButtonElement>;
    const currentIcon = selector?.querySelector("span[data-mode]") as HTMLElement;

    if (!currentIcon) return;

    // トリガーのアイコンを更新
    currentIcon.innerHTML = icons[mode];
    currentIcon.setAttribute("data-mode", mode);

    // アクティブな項目を更新
    items?.forEach((item) => {
      const itemMode = item.dataset.mode as ColorMode;
      const activeClasses = ["bg-slate-900/20", "dark:bg-slate-100/20", "font-medium"];
      const inactiveClasses = ["bg-transparent"];

      if (itemMode === mode) {
        item.classList.add(...activeClasses);
        item.classList.remove(...inactiveClasses);
      } else {
        item.classList.remove(...activeClasses);
        item.classList.add(...inactiveClasses);
      }
    });
  }

  // DOMContentLoaded時またはすぐに初期化
  function initializeColorMode() {
    const selector = document.querySelector("#color-mode-selector");
    const items = selector?.querySelectorAll("button[data-mode]") as NodeListOf<HTMLButtonElement>;

    if (selector) {
      updateUI(savedMode);

      // ドロップダウンアイテムのクリック処理
      items?.forEach((item) => {
        item.addEventListener("click", (e) => {
          const target = e.currentTarget as HTMLButtonElement;
          const selectedMode = target?.dataset.mode as ColorMode;
          if (selectedMode) {
            localStorage.setItem("color-mode", selectedMode);
            applyColorMode(selectedMode);
            updateUI(selectedMode);
          }
        });
      });

      // システム設定の変更を監視
      window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", () => {
        const currentMode = localStorage.getItem("color-mode") as ColorMode;
        if (currentMode === "system" || !currentMode) {
          applyColorMode("system");
        }
      });
    }
  }

  // 即座に適用（FOUC防止）
  applyColorMode(savedMode);

  // DOM準備完了後にUI初期化
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeColorMode);
  } else {
    initializeColorMode();
  }
</script>
